{"version":3,"file":"static/js/150.ac25e820.chunk.js","mappings":"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","sources":["API/API.js","webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","webpack://goit-react-hw-05-movies/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\naxios.defaults.headers.post['Content-Type'] = 'application/json; charset=utf-8';\n\nconst KEY = '96dea35b5a4d6ccb61b77721fd102ef9';\n\nconst GetFilms = async () => {\n  const response = await axios.get(`3/trending/movie/day?api_key=${KEY}`);\n\n  return response.data;\n};\n\nconst getMovieById = async id => {\n  const response = await axios.get(\n    `3/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst getMovieReviews = async id => {\n  const response = await axios.get(\n    `3/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nconst getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `/3/search/movie?api_key=${KEY}&query=${query}`\n  );\n  return response.data;\n};\n\nconst getMoviesCast = async id => {\n  const response = await axios.get(`/3/movie/${id}/credits?api_key=${KEY}`);\n  return response.data;\n};\n\nexport {\n  GetFilms,\n  getMovieById,\n  getMoviesByQuery,\n  getMovieReviews,\n  getMoviesCast,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"photo\":\"Cast_photo__lvFLf\",\"castList\":\"Cast_castList__ARoWn\",\"castItem\":\"Cast_castItem__-Jcfe\"};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMoviesCast } from 'API';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport placeHolder from '../../data/no-image.jpg';\nimport s from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchFilm() {\n      setLoading(true);\n      try {\n        const getFilmReviews = await getMoviesCast(movieId);\n        setCast(getFilmReviews.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchFilm();\n  }, [movieId]);\n\n  return (\n    <section>\n      {loading && (\n        <ThreeCircles\n          color=\"red\"\n          outerCircleColor=\"blue\"\n          middleCircleColor=\"red\"\n          innerCircleColor=\"grey\"\n        />\n      )}\n      <ul className={s.castList}>\n        {cast.length > 0 &&\n          cast.map(({ original_name, character, profile_path, id }) => {\n            return (\n              <li key={id} className={s.castItem}>\n                <img\n                  className={s.photo}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : placeHolder\n                  }\n                  alt={original_name}\n                />\n                <p>Name: {original_name}</p>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n      </ul>\n\n      {cast.length === 0 && <p> Cast not found =(</p>}\n    </section>\n  );\n};\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"cardContainer\":\"MovieDetails_cardContainer__80lGT\",\"Image\":\"MovieDetails_Image__Gpymw\",\"Container\":\"MovieDetails_Container__RyaeD\",\"imageThumb\":\"MovieDetails_imageThumb__hm1qO\",\"genresList\":\"MovieDetails_genresList__iljfW\",\"movieGenres\":\"MovieDetails_movieGenres__TTLvJ\",\"information\":\"MovieDetails_information__vmdmd\"};","import { useState, useEffect, Suspense } from 'react';\nimport { getMovieById } from 'API';\nimport Cast from '../Cast';\nimport Reviews from '../Reviews';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport placeHolder from '../../data/no-image.jpg';\nimport s from './MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [film, setFilm] = useState({});\n  const [genres, setGenres] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  const backLink = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    async function fetchFilm() {\n      setLoading(true);\n      try {\n        const getFilmDetails = await getMovieById(movieId);\n        setFilm(getFilmDetails);\n        setGenres(getFilmDetails.genres);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchFilm();\n  }, [movieId]);\n\n  const { original_title, vote_average, overview, poster_path } = film;\n  return (\n    <main className={s.cardContainer}>\n      {loading && (\n        <ThreeCircles\n          color=\"red\"\n          outerCircleColor=\"blue\"\n          middleCircleColor=\"red\"\n          innerCircleColor=\"grey\"\n        />\n      )}\n      <Link to={backLink}> Go back </Link>\n      {film && (\n        <section className={s.Container}>\n          <div className={s.imageThumb}>\n            <img\n              className={s.Image}\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : placeHolder\n              }\n              alt={original_title}\n            />\n          </div>\n          <div>\n            <h2> {original_title}</h2>\n            <p> User Score: {vote_average * 10}%</p>\n            {film && (\n              <div>\n                <h3>Genres</h3>\n                <ul className={s.genresList}>\n                  {genres.map(genre => (\n                    <li key={genre.id} className={s.movieGenres}>\n                      {genre.name}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            <div>\n              <h3>Overview</h3>\n              <p> {overview}</p>\n            </div>\n          </div>\n        </section>\n      )}\n      <section className={s.section}>\n        <div className={s.information}>\n          <h3>Additional information</h3>\n\n          <Link to={`cast`} movieid={movieId} state={{ from: backLink }}>\n            Cast\n          </Link>\n          <Link to={`reviews`} movieid={movieId} state={{ from: backLink }}>\n            Reviews\n          </Link>\n        </div>\n      </section>\n      <Suspense fallback={((<Cast />), (<Reviews />))}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport { getMovieReviews } from 'API';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchFilm() {\n      setLoading(true);\n      try {\n        const getFilmReviews = await getMovieReviews(movieId);\n        setReviews(getFilmReviews.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchFilm();\n  }, [movieId]);\n\n  return (\n    <section>\n      {loading && (\n        <ThreeCircles\n          color=\"red\"\n          outerCircleColor=\"blue\"\n          middleCircleColor=\"red\"\n          innerCircleColor=\"grey\"\n        />\n      )}\n      {reviews.length > 0 ? (\n        reviews.map(({ author, content }) => (\n          <div key={author}>\n            <h4>Author: {author}</h4>\n            <p>{content}</p>\n          </div>\n        ))\n      ) : (\n        <p> No Reviews found =(</p>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","KEY","GetFilms","response","data","getMovieById","id","getMovieReviews","getMoviesByQuery","query","getMoviesCast","movieId","useParams","useState","cast","setCast","loading","setLoading","useEffect","getFilmReviews","console","log","fetchFilm","color","outerCircleColor","middleCircleColor","innerCircleColor","className","s","length","map","original_name","character","profile_path","src","placeHolder","alt","film","setFilm","genres","setGenres","location","useLocation","backLink","state","from","getFilmDetails","original_title","vote_average","overview","poster_path","to","genre","name","movieid","Suspense","fallback","Cast","Reviews","reviews","setReviews","results","author","content"],"sourceRoot":""}